
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import proyecto1.Reporte;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parserUFE extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym3.class;
}

  /** Default constructor. */
  @Deprecated
  public parserUFE() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parserUFE(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserUFE(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\161\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\005\007\000\002\006\005\000\002\007\014" +
    "\000\002\010\007\000\002\061\005\000\002\013\006\000" +
    "\002\014\004\000\002\014\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\016\012\000\002\016\013\000\002\017\013\000" +
    "\002\017\012\000\002\020\013\000\002\020\012\000\002" +
    "\021\013\000\002\021\012\000\002\022\006\000\002\023" +
    "\014\000\002\023\013\000\002\024\012\000\002\025\012" +
    "\000\002\026\004\000\002\026\003\000\002\027\012\000" +
    "\002\030\013\000\002\031\004\000\002\031\003\000\002" +
    "\032\005\000\002\060\003\000\002\060\003\000\002\060" +
    "\003\000\002\060\003\000\002\060\005\000\002\033\003" +
    "\000\002\033\003\000\002\034\006\000\002\035\003\000" +
    "\002\035\004\000\002\035\005\000\002\035\004\000\002" +
    "\036\007\000\002\037\004\000\002\037\003\000\002\040" +
    "\010\000\002\041\004\000\002\042\007\000\002\043\007" +
    "\000\002\044\007\000\002\047\005\000\002\056\005\000" +
    "\002\056\003\000\002\062\005\000\002\062\003\000\002" +
    "\050\006\000\002\045\005\000\002\045\011\000\002\051" +
    "\005\000\002\051\003\000\002\053\005\000\002\053\003" +
    "\000\002\055\003\000\002\052\006\000\002\046\006\000" +
    "\002\054\003\000\002\057\005\000\002\057\005\000\002" +
    "\057\005\000\002\057\004\000\002\057\005\000\002\057" +
    "\005\000\002\057\005\000\002\057\005\000\002\057\005" +
    "\000\002\057\005\000\002\057\004\000\002\057\005\000" +
    "\002\057\005\000\002\057\005\000\002\057\005\000\002" +
    "\057\005\000\002\057\005\000\002\057\003\000\002\057" +
    "\003\000\002\057\003\000\002\057\003\000\002\057\003" +
    "\000\002\057\003\000\002\057\003\000\002\057\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011c\000\026\010\027\020\010\021\012\022\015\023" +
    "\006\025\035\055\017\056\032\057\023\060\037\001\002" +
    "\000\032\002\ufffc\010\ufffc\020\ufffc\021\ufffc\022\ufffc\023" +
    "\ufffc\025\ufffc\055\ufffc\056\ufffc\057\ufffc\060\ufffc\070\ufffc" +
    "\001\002\000\032\002\uffc7\010\uffc7\020\uffc7\021\uffc7\022" +
    "\uffc7\023\uffc7\025\uffc7\055\uffc7\056\uffc7\057\uffc7\060\uffc7" +
    "\070\uffc7\001\002\000\004\067\u011b\001\002\000\032\002" +
    "\ufffd\010\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd\025\ufffd" +
    "\055\ufffd\056\ufffd\057\ufffd\060\ufffd\070\ufffd\001\002\000" +
    "\004\067\235\001\002\000\032\002\uffc8\010\uffc8\020\uffc8" +
    "\021\uffc8\022\uffc8\023\uffc8\025\uffc8\055\uffc8\056\uffc8\057" +
    "\uffc8\060\uffc8\070\uffc8\001\002\000\004\067\226\001\002" +
    "\000\032\002\ufffe\010\ufffe\020\ufffe\021\ufffe\022\ufffe\023" +
    "\ufffe\025\ufffe\055\ufffe\056\ufffe\057\ufffe\060\ufffe\070\ufffe" +
    "\001\002\000\032\002\ufff2\010\ufff2\020\ufff2\021\ufff2\022" +
    "\ufff2\023\ufff2\025\ufff2\055\ufff2\056\ufff2\057\ufff2\060\ufff2" +
    "\070\ufff2\001\002\000\004\067\222\001\002\000\032\002" +
    "\ufff7\010\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\025\ufff7" +
    "\055\ufff7\056\ufff7\057\ufff7\060\ufff7\070\ufff7\001\002\000" +
    "\026\004\057\005\065\006\054\007\064\010\214\011\066" +
    "\012\063\016\062\067\060\072\067\001\002\000\032\002" +
    "\ufff9\010\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9\025\ufff9" +
    "\055\ufff9\056\ufff9\057\ufff9\060\ufff9\070\ufff9\001\002\000" +
    "\004\026\211\001\002\000\032\002\ufffb\010\ufffb\020\ufffb" +
    "\021\ufffb\022\ufffb\023\ufffb\025\ufffb\055\ufffb\056\ufffb\057" +
    "\ufffb\060\ufffb\070\ufffb\001\002\000\004\010\205\001\002" +
    "\000\032\002\ufffa\010\ufffa\020\ufffa\021\ufffa\022\ufffa\023" +
    "\ufffa\025\ufffa\055\ufffa\056\ufffa\057\ufffa\060\ufffa\070\ufffa" +
    "\001\002\000\032\002\ufff3\010\ufff3\020\ufff3\021\ufff3\022" +
    "\ufff3\023\ufff3\025\ufff3\055\ufff3\056\ufff3\057\ufff3\060\ufff3" +
    "\070\ufff3\001\002\000\032\002\ufff4\010\ufff4\020\ufff4\021" +
    "\ufff4\022\ufff4\023\ufff4\025\ufff4\055\ufff4\056\ufff4\057\ufff4" +
    "\060\ufff4\070\ufff4\001\002\000\006\026\202\065\140\001" +
    "\002\000\034\002\uffc5\010\uffc5\020\uffc5\021\uffc5\022\uffc5" +
    "\023\uffc5\024\166\025\uffc5\055\uffc5\056\uffc5\057\uffc5\060" +
    "\uffc5\070\uffc5\001\002\000\032\002\ufff8\010\ufff8\020\ufff8" +
    "\021\ufff8\022\ufff8\023\ufff8\025\ufff8\055\ufff8\056\ufff8\057" +
    "\ufff8\060\ufff8\070\ufff8\001\002\000\004\010\146\001\002" +
    "\000\032\002\ufff6\010\ufff6\020\ufff6\021\ufff6\022\ufff6\023" +
    "\ufff6\025\ufff6\055\ufff6\056\ufff6\057\ufff6\060\ufff6\070\ufff6" +
    "\001\002\000\030\002\000\010\027\020\010\021\012\022" +
    "\015\023\006\025\035\055\017\056\032\057\023\060\037" +
    "\001\002\000\004\067\053\001\002\000\032\002\ufff5\010" +
    "\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\025\ufff5\055\ufff5" +
    "\056\ufff5\057\ufff5\060\ufff5\070\ufff5\001\002\000\004\067" +
    "\042\001\002\000\004\002\041\001\002\000\004\002\001" +
    "\001\002\000\004\045\043\001\002\000\004\014\044\001" +
    "\002\000\004\010\045\001\002\000\004\043\046\001\002" +
    "\000\004\063\047\001\002\000\004\010\050\001\002\000" +
    "\004\066\051\001\002\000\004\061\052\001\002\000\032" +
    "\002\uffef\010\uffef\020\uffef\021\uffef\022\uffef\023\uffef\025" +
    "\uffef\055\uffef\056\uffef\057\uffef\060\uffef\070\uffef\001\002" +
    "\000\026\004\057\005\065\006\054\007\064\010\055\011" +
    "\066\012\063\016\062\067\060\072\067\001\002\000\050" +
    "\013\uff97\014\uff97\015\uff97\016\uff97\017\uff97\033\uff97\034" +
    "\uff97\035\uff97\036\uff97\037\uff97\042\uff97\043\uff97\044\uff97" +
    "\045\uff97\061\uff97\063\uff97\064\uff97\066\uff97\070\uff97\001" +
    "\002\000\052\013\uff96\014\uff96\015\uff96\016\uff96\017\uff96" +
    "\033\uff96\034\uff96\035\uff96\036\uff96\037\uff96\042\uff96\043" +
    "\uff96\044\uff96\045\uff96\061\uff96\063\uff96\064\uff96\065\140" +
    "\066\uff96\070\uff96\001\002\000\050\013\uffad\014\uffad\015" +
    "\uffad\016\uffad\017\uffad\033\uffad\034\uffad\035\uffad\036\uffad" +
    "\037\uffad\042\uffad\043\uffad\044\uffad\045\uffad\061\uffad\063" +
    "\uffad\064\uffad\066\uffad\070\uffad\001\002\000\050\013\uff95" +
    "\014\uff95\015\uff95\016\uff95\017\uff95\033\uff95\034\uff95\035" +
    "\uff95\036\uff95\037\uff95\042\uff95\043\uff95\044\uff95\045\uff95" +
    "\061\uff95\063\uff95\064\uff95\066\uff95\070\uff95\001\002\000" +
    "\026\004\057\005\065\006\054\007\064\010\055\011\066" +
    "\012\063\016\062\067\060\072\067\001\002\000\050\013" +
    "\110\014\111\015\107\016\103\017\115\033\106\034\102" +
    "\035\104\036\112\037\116\042\101\043\114\044\113\045" +
    "\105\061\uffaa\063\uffaa\064\uffaa\066\uffaa\070\uffaa\001\002" +
    "\000\026\004\057\005\065\006\054\007\064\010\055\011" +
    "\066\012\063\016\062\067\060\072\067\001\002\000\050" +
    "\013\uff94\014\uff94\015\uff94\016\uff94\017\uff94\033\uff94\034" +
    "\uff94\035\uff94\036\uff94\037\uff94\042\uff94\043\uff94\044\uff94" +
    "\045\uff94\061\uff94\063\uff94\064\uff94\066\uff94\070\uff94\001" +
    "\002\000\050\013\uff98\014\uff98\015\uff98\016\uff98\017\uff98" +
    "\033\uff98\034\uff98\035\uff98\036\uff98\037\uff98\042\uff98\043" +
    "\uff98\044\uff98\045\uff98\061\uff98\063\uff98\064\uff98\066\uff98" +
    "\070\uff98\001\002\000\050\013\uff92\014\uff92\015\uff92\016" +
    "\uff92\017\uff92\033\uff92\034\uff92\035\uff92\036\uff92\037\uff92" +
    "\042\uff92\043\uff92\044\uff92\045\uff92\061\uff92\063\uff92\064" +
    "\uff92\066\uff92\070\uff92\001\002\000\050\013\uff93\014\uff93" +
    "\015\uff93\016\uff93\017\uff93\033\uff93\034\uff93\035\uff93\036" +
    "\uff93\037\uff93\042\uff93\043\uff93\044\uff93\045\uff93\061\uff93" +
    "\063\uff93\064\uff93\066\uff93\070\uff93\001\002\000\026\004" +
    "\057\005\065\006\054\007\064\010\055\011\066\012\063" +
    "\016\062\067\060\072\067\001\002\000\050\013\uff91\014" +
    "\uff91\015\uff91\016\uff91\017\uff91\033\uff91\034\uff91\035\uff91" +
    "\036\uff91\037\uff91\042\uff91\043\uff91\044\uff91\045\uff91\061" +
    "\uff91\063\uff91\064\uff91\066\uff91\070\uff91\001\002\000\004" +
    "\066\072\001\002\000\004\071\073\001\002\000\026\010" +
    "\027\020\010\021\012\022\015\023\006\025\035\055\017" +
    "\056\032\057\023\060\037\001\002\000\034\002\uffc1\010" +
    "\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1" +
    "\055\uffc1\056\uffc1\057\uffc1\060\uffc1\070\uffc1\001\002\000" +
    "\030\010\027\020\010\021\012\022\015\023\006\025\035" +
    "\055\017\056\032\057\023\060\037\070\076\001\002\000" +
    "\034\002\uffed\010\uffed\020\uffed\021\uffed\022\uffed\023\uffed" +
    "\024\uffed\025\uffed\055\uffed\056\uffed\057\uffed\060\uffed\070" +
    "\uffed\001\002\000\032\002\uffff\010\uffff\020\uffff\021\uffff" +
    "\022\uffff\023\uffff\025\uffff\055\uffff\056\uffff\057\uffff\060" +
    "\uffff\070\uffff\001\002\000\050\013\110\014\111\015\107" +
    "\016\103\017\115\033\uffa6\034\uffa6\035\uffa6\036\112\037" +
    "\116\042\101\043\114\044\113\045\105\061\uffa6\063\uffa6" +
    "\064\uffa6\066\uffa6\070\uffa6\001\002\000\026\004\057\005" +
    "\065\006\054\007\064\010\055\011\066\012\063\016\062" +
    "\067\060\072\067\001\002\000\026\004\057\005\065\006" +
    "\054\007\064\010\055\011\066\012\063\016\062\067\060" +
    "\072\067\001\002\000\026\004\057\005\065\006\054\007" +
    "\064\010\055\011\066\012\063\016\062\067\060\072\067" +
    "\001\002\000\026\004\057\005\065\006\054\007\064\010" +
    "\055\011\066\012\063\016\062\067\060\072\067\001\002" +
    "\000\026\004\057\005\065\006\054\007\064\010\055\011" +
    "\066\012\063\016\062\067\060\072\067\001\002\000\026" +
    "\004\057\005\065\006\054\007\064\010\055\011\066\012" +
    "\063\016\062\067\060\072\067\001\002\000\026\004\057" +
    "\005\065\006\054\007\064\010\055\011\066\012\063\016" +
    "\062\067\060\072\067\001\002\000\026\004\057\005\065" +
    "\006\054\007\064\010\055\011\066\012\063\016\062\067" +
    "\060\072\067\001\002\000\026\004\057\005\065\006\054" +
    "\007\064\010\055\011\066\012\063\016\062\067\060\072" +
    "\067\001\002\000\026\004\057\005\065\006\054\007\064" +
    "\010\055\011\066\012\063\016\062\067\060\072\067\001" +
    "\002\000\026\004\057\005\065\006\054\007\064\010\055" +
    "\011\066\012\063\016\062\067\060\072\067\001\002\000" +
    "\026\004\057\005\065\006\054\007\064\010\055\011\066" +
    "\012\063\016\062\067\060\072\067\001\002\000\026\004" +
    "\057\005\065\006\054\007\064\010\055\011\066\012\063" +
    "\016\062\067\060\072\067\001\002\000\026\004\057\005" +
    "\065\006\054\007\064\010\055\011\066\012\063\016\062" +
    "\067\060\072\067\001\002\000\050\013\110\014\111\015" +
    "\107\016\103\017\115\033\uffa1\034\uffa1\035\uffa1\036\uffa1" +
    "\037\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1\061\uffa1\063" +
    "\uffa1\064\uffa1\066\uffa1\070\uffa1\001\002\000\050\013\110" +
    "\014\111\015\107\016\uff9e\017\uff9e\033\uff9e\034\uff9e\035" +
    "\uff9e\036\uff9e\037\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e" +
    "\061\uff9e\063\uff9e\064\uff9e\066\uff9e\070\uff9e\001\002\000" +
    "\050\013\110\014\111\015\107\016\103\017\115\033\uffa4" +
    "\034\uffa4\035\uffa4\036\uffa4\037\uffa4\042\uffa4\043\uffa4\044" +
    "\uffa4\045\uffa4\061\uffa4\063\uffa4\064\uffa4\066\uffa4\070\uffa4" +
    "\001\002\000\050\013\110\014\111\015\107\016\103\017" +
    "\115\033\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\042\uffa2" +
    "\043\uffa2\044\uffa2\045\uffa2\061\uffa2\063\uffa2\064\uffa2\066" +
    "\uffa2\070\uffa2\001\002\000\050\013\110\014\111\015\107" +
    "\016\103\017\115\033\uffa0\034\uffa0\035\uffa0\036\uffa0\037" +
    "\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0\061\uffa0\063\uffa0" +
    "\064\uffa0\066\uffa0\070\uffa0\001\002\000\050\013\110\014" +
    "\uff9b\015\uff9b\016\uff9b\017\uff9b\033\uff9b\034\uff9b\035\uff9b" +
    "\036\uff9b\037\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b\061" +
    "\uff9b\063\uff9b\064\uff9b\066\uff9b\070\uff9b\001\002\000\050" +
    "\013\uff9a\014\uff9a\015\uff9a\016\uff9a\017\uff9a\033\uff9a\034" +
    "\uff9a\035\uff9a\036\uff9a\037\uff9a\042\uff9a\043\uff9a\044\uff9a" +
    "\045\uff9a\061\uff9a\063\uff9a\064\uff9a\066\uff9a\070\uff9a\001" +
    "\002\000\050\013\110\014\uff9c\015\uff9c\016\uff9c\017\uff9c" +
    "\033\uff9c\034\uff9c\035\uff9c\036\uff9c\037\uff9c\042\uff9c\043" +
    "\uff9c\044\uff9c\045\uff9c\061\uff9c\063\uff9c\064\uff9c\066\uff9c" +
    "\070\uff9c\001\002\000\050\013\110\014\111\015\107\016" +
    "\103\017\115\033\uffa7\034\uffa7\035\uffa7\036\112\037\116" +
    "\042\101\043\114\044\113\045\105\061\uffa7\063\uffa7\064" +
    "\uffa7\066\uffa7\070\uffa7\001\002\000\050\013\110\014\111" +
    "\015\107\016\103\017\115\033\uffa5\034\uffa5\035\uffa5\036" +
    "\uffa5\037\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5\061\uffa5" +
    "\063\uffa5\064\uffa5\066\uffa5\070\uffa5\001\002\000\050\013" +
    "\110\014\111\015\107\016\103\017\115\033\uffa9\034\uffa9" +
    "\035\uffa9\036\112\037\116\042\101\043\114\044\113\045" +
    "\105\061\uffa9\063\uffa9\064\uffa9\066\uffa9\070\uffa9\001\002" +
    "\000\050\013\110\014\111\015\107\016\uff9d\017\uff9d\033" +
    "\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d\042\uff9d\043\uff9d" +
    "\044\uff9d\045\uff9d\061\uff9d\063\uff9d\064\uff9d\066\uff9d\070" +
    "\uff9d\001\002\000\050\013\110\014\111\015\107\016\103" +
    "\017\115\033\106\034\uffa8\035\104\036\112\037\116\042" +
    "\101\043\114\044\113\045\105\061\uffa8\063\uffa8\064\uffa8" +
    "\066\uffa8\070\uffa8\001\002\000\050\013\110\014\111\015" +
    "\107\016\103\017\115\033\uffa3\034\uffa3\035\uffa3\036\uffa3" +
    "\037\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3\061\uffa3\063" +
    "\uffa3\064\uffa3\066\uffa3\070\uffa3\001\002\000\050\013\110" +
    "\014\111\015\107\016\uff9f\017\uff9f\033\uff9f\034\uff9f\035" +
    "\uff9f\036\uff9f\037\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f" +
    "\061\uff9f\063\uff9f\064\uff9f\066\uff9f\070\uff9f\001\002\000" +
    "\040\013\110\014\111\015\107\016\103\017\115\033\106" +
    "\034\102\035\104\036\112\037\116\042\101\043\114\044" +
    "\113\045\105\066\137\001\002\000\050\013\uff99\014\uff99" +
    "\015\uff99\016\uff99\017\uff99\033\uff99\034\uff99\035\uff99\036" +
    "\uff99\037\uff99\042\uff99\043\uff99\044\uff99\045\uff99\061\uff99" +
    "\063\uff99\064\uff99\066\uff99\070\uff99\001\002\000\026\004" +
    "\057\005\065\006\054\007\064\010\055\011\066\012\063" +
    "\016\062\067\060\072\067\001\002\000\004\064\142\001" +
    "\002\000\052\013\uffac\014\uffac\015\uffac\016\uffac\017\uffac" +
    "\026\uffac\033\uffac\034\uffac\035\uffac\036\uffac\037\uffac\042" +
    "\uffac\043\uffac\044\uffac\045\uffac\061\uffac\063\uffac\064\uffac" +
    "\066\uffac\070\uffac\001\002\000\004\061\165\001\002\000" +
    "\006\061\160\063\161\001\002\000\006\061\uffb7\063\uffb7" +
    "\001\002\000\012\026\147\061\uffb5\063\uffb5\065\140\001" +
    "\002\000\030\004\057\005\065\006\054\007\064\010\055" +
    "\011\066\012\063\016\062\067\060\071\150\072\067\001" +
    "\002\000\026\004\057\005\065\006\054\007\064\010\055" +
    "\011\066\012\063\016\062\067\060\072\067\001\002\000" +
    "\006\061\uffb6\063\uffb6\001\002\000\006\063\uffb0\070\uffb0" +
    "\001\002\000\006\063\155\070\154\001\002\000\004\061" +
    "\157\001\002\000\026\004\057\005\065\006\054\007\064" +
    "\010\055\011\066\012\063\016\062\067\060\072\067\001" +
    "\002\000\006\063\uffb1\070\uffb1\001\002\000\032\002\uffb2" +
    "\010\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\025\uffb2\055" +
    "\uffb2\056\uffb2\057\uffb2\060\uffb2\070\uffb2\001\002\000\032" +
    "\002\uffb9\010\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\025" +
    "\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\070\uffb9\001\002" +
    "\000\004\010\163\001\002\000\006\061\uffb8\063\uffb8\001" +
    "\002\000\010\026\164\061\uffb5\063\uffb5\001\002\000\026" +
    "\004\057\005\065\006\054\007\064\010\055\011\066\012" +
    "\063\016\062\067\060\072\067\001\002\000\032\002\uffb3" +
    "\010\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3\025\uffb3\055" +
    "\uffb3\056\uffb3\057\uffb3\060\uffb3\070\uffb3\001\002\000\006" +
    "\025\174\071\073\001\002\000\034\002\uffbf\010\uffbf\020" +
    "\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\055\uffbf" +
    "\056\uffbf\057\uffbf\060\uffbf\070\uffbf\001\002\000\034\002" +
    "\uffc4\010\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024\166" +
    "\025\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4\070\uffc4\001" +
    "\002\000\032\002\uffc2\010\uffc2\020\uffc2\021\uffc2\022\uffc2" +
    "\023\uffc2\025\uffc2\055\uffc2\056\uffc2\057\uffc2\060\uffc2\070" +
    "\uffc2\001\002\000\034\002\uffc0\010\uffc0\020\uffc0\021\uffc0" +
    "\022\uffc0\023\uffc0\024\uffc0\025\uffc0\055\uffc0\056\uffc0\057" +
    "\uffc0\060\uffc0\070\uffc0\001\002\000\032\002\uffc3\010\uffc3" +
    "\020\uffc3\021\uffc3\022\uffc3\023\uffc3\025\uffc3\055\uffc3\056" +
    "\uffc3\057\uffc3\060\uffc3\070\uffc3\001\002\000\004\067\176" +
    "\001\002\000\032\002\uffbd\010\uffbd\020\uffbd\021\uffbd\022" +
    "\uffbd\023\uffbd\025\uffbd\055\uffbd\056\uffbd\057\uffbd\060\uffbd" +
    "\070\uffbd\001\002\000\026\004\057\005\065\006\054\007" +
    "\064\010\055\011\066\012\063\016\062\067\060\072\067" +
    "\001\002\000\004\066\200\001\002\000\004\071\073\001" +
    "\002\000\034\002\uffbe\010\uffbe\020\uffbe\021\uffbe\022\uffbe" +
    "\023\uffbe\024\uffbe\025\uffbe\055\uffbe\056\uffbe\057\uffbe\060" +
    "\uffbe\070\uffbe\001\002\000\026\004\057\005\065\006\054" +
    "\007\064\010\055\011\066\012\063\016\062\067\060\072" +
    "\067\001\002\000\004\061\204\001\002\000\032\002\uffb4" +
    "\010\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\025\uffb4\055" +
    "\uffb4\056\uffb4\057\uffb4\060\uffb4\070\uffb4\001\002\000\004" +
    "\067\206\001\002\000\004\066\207\001\002\000\004\071" +
    "\073\001\002\000\032\002\ufff1\010\ufff1\020\ufff1\021\ufff1" +
    "\022\ufff1\023\ufff1\025\ufff1\055\ufff1\056\ufff1\057\ufff1\060" +
    "\ufff1\070\ufff1\001\002\000\026\004\057\005\065\006\054" +
    "\007\064\010\055\011\066\012\063\016\062\067\060\072" +
    "\067\001\002\000\004\061\213\001\002\000\032\002\uffab" +
    "\010\uffab\020\uffab\021\uffab\022\uffab\023\uffab\025\uffab\055" +
    "\uffab\056\uffab\057\uffab\060\uffab\070\uffab\001\002\000\044" +
    "\013\uff96\014\uff96\015\uff96\016\uff96\017\uff96\033\uff96\034" +
    "\uff96\035\uff96\036\uff96\037\uff96\042\uff96\043\uff96\044\uff96" +
    "\045\uff96\054\217\061\uff96\065\140\001\002\000\004\061" +
    "\216\001\002\000\032\002\ufff0\010\ufff0\020\ufff0\021\ufff0" +
    "\022\ufff0\023\ufff0\025\ufff0\055\ufff0\056\ufff0\057\ufff0\060" +
    "\ufff0\070\ufff0\001\002\000\026\004\057\005\065\006\054" +
    "\007\064\010\055\011\066\012\063\016\062\067\060\072" +
    "\067\001\002\000\004\061\221\001\002\000\032\002\uffee" +
    "\010\uffee\020\uffee\021\uffee\022\uffee\023\uffee\025\uffee\055" +
    "\uffee\056\uffee\057\uffee\060\uffee\070\uffee\001\002\000\026" +
    "\004\057\005\065\006\054\007\064\010\055\011\066\012" +
    "\063\016\062\067\060\072\067\001\002\000\004\066\224" +
    "\001\002\000\004\071\073\001\002\000\032\002\uffbb\010" +
    "\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\025\uffbb\055\uffbb" +
    "\056\uffbb\057\uffbb\060\uffbb\070\uffbb\001\002\000\026\004" +
    "\057\005\065\006\054\007\064\010\055\011\066\012\063" +
    "\016\062\067\060\072\067\001\002\000\006\017\231\066" +
    "\232\001\002\000\006\017\uffae\066\uffae\001\002\000\026" +
    "\004\057\005\065\006\054\007\064\010\055\011\066\012" +
    "\063\016\062\067\060\072\067\001\002\000\004\061\233" +
    "\001\002\000\032\002\uffba\010\uffba\020\uffba\021\uffba\022" +
    "\uffba\023\uffba\025\uffba\055\uffba\056\uffba\057\uffba\060\uffba" +
    "\070\uffba\001\002\000\006\017\uffaf\066\uffaf\001\002\000" +
    "\004\074\244\001\002\000\006\040\uffe8\074\uffe8\001\002" +
    "\000\006\040\uffe3\074\uffe3\001\002\000\006\040\uffe4\074" +
    "\uffe4\001\002\000\006\040\u011a\074\244\001\002\000\006" +
    "\040\uffe9\074\uffe9\001\002\000\006\040\uffe2\074\uffe2\001" +
    "\002\000\022\046\256\047\260\050\255\051\254\052\257" +
    "\053\251\073\252\076\253\001\002\000\006\040\uffe6\074" +
    "\uffe6\001\002\000\006\040\uffe7\074\uffe7\001\002\000\006" +
    "\040\uffea\074\uffea\001\002\000\006\040\uffe5\074\uffe5\001" +
    "\002\000\004\027\261\001\002\000\004\027\261\001\002" +
    "\000\004\010\u0101\001\002\000\004\027\261\001\002\000" +
    "\004\027\261\001\002\000\004\027\261\001\002\000\004" +
    "\027\261\001\002\000\004\027\261\001\002\000\004\026" +
    "\302\001\002\000\006\027\uffcf\075\uffcf\001\002\000\006" +
    "\027\261\075\264\001\002\000\014\005\271\007\267\010" +
    "\273\062\266\071\270\001\002\000\006\027\uffd0\075\uffd0" +
    "\001\002\000\010\027\uffcb\074\uffcb\075\uffcb\001\002\000" +
    "\010\027\uffcc\074\uffcc\075\uffcc\001\002\000\026\004\057" +
    "\005\065\006\054\007\064\010\055\011\066\012\063\016" +
    "\062\067\060\072\067\001\002\000\010\027\uffcd\074\uffcd" +
    "\075\uffcd\001\002\000\004\074\274\001\002\000\010\027" +
    "\uffca\074\uffca\075\uffca\001\002\000\004\076\275\001\002" +
    "\000\004\047\276\001\002\000\004\075\277\001\002\000" +
    "\006\040\uffd1\074\uffd1\001\002\000\004\070\301\001\002" +
    "\000\010\027\uffc9\074\uffc9\075\uffc9\001\002\000\014\005" +
    "\271\007\267\010\273\062\266\071\270\001\002\000\006" +
    "\027\uffce\075\uffce\001\002\000\006\027\261\075\305\001" +
    "\002\000\016\005\271\007\267\010\273\062\266\071\270" +
    "\074\306\001\002\000\004\076\314\001\002\000\004\074" +
    "\310\001\002\000\004\076\311\001\002\000\004\052\312" +
    "\001\002\000\004\075\313\001\002\000\006\040\uffdb\074" +
    "\uffdb\001\002\000\004\052\315\001\002\000\004\075\316" +
    "\001\002\000\006\040\uffda\074\uffda\001\002\000\006\027" +
    "\261\075\320\001\002\000\006\040\uffd9\074\uffd9\001\002" +
    "\000\006\027\261\075\322\001\002\000\004\074\324\001" +
    "\002\000\004\074\347\001\002\000\004\032\325\001\002" +
    "\000\004\075\326\001\002\000\004\074\331\001\002\000" +
    "\004\074\uffd3\001\002\000\004\074\342\001\002\000\004" +
    "\031\332\001\002\000\004\075\333\001\002\000\014\005" +
    "\271\007\267\010\273\062\266\071\270\001\002\000\004" +
    "\074\335\001\002\000\004\076\336\001\002\000\004\031" +
    "\337\001\002\000\004\075\340\001\002\000\004\074\uffd2" +
    "\001\002\000\004\074\uffd4\001\002\000\006\031\332\076" +
    "\343\001\002\000\004\032\344\001\002\000\004\075\345" +
    "\001\002\000\004\074\uffd6\001\002\000\004\074\362\001" +
    "\002\000\006\030\350\076\351\001\002\000\004\075\354" +
    "\001\002\000\004\050\352\001\002\000\004\075\353\001" +
    "\002\000\006\040\uffd7\074\uffd7\001\002\000\014\005\271" +
    "\007\267\010\273\062\266\071\270\001\002\000\004\074" +
    "\356\001\002\000\004\076\357\001\002\000\004\030\360" +
    "\001\002\000\004\075\361\001\002\000\004\074\uffd5\001" +
    "\002\000\004\076\363\001\002\000\004\050\364\001\002" +
    "\000\004\075\365\001\002\000\006\040\uffd8\074\uffd8\001" +
    "\002\000\006\027\261\075\367\001\002\000\016\005\271" +
    "\007\267\010\273\062\266\071\270\074\370\001\002\000" +
    "\004\076\376\001\002\000\004\074\372\001\002\000\004" +
    "\076\373\001\002\000\004\051\374\001\002\000\004\075" +
    "\375\001\002\000\006\040\uffdd\074\uffdd\001\002\000\004" +
    "\051\377\001\002\000\004\075\u0100\001\002\000\006\040" +
    "\uffdc\074\uffdc\001\002\000\004\075\u0102\001\002\000\006" +
    "\040\uffc6\074\uffc6\001\002\000\006\027\261\075\u0104\001" +
    "\002\000\016\005\271\007\267\010\273\062\266\071\270" +
    "\074\u0105\001\002\000\004\076\u010b\001\002\000\004\074" +
    "\u0107\001\002\000\004\076\u0108\001\002\000\004\073\u0109" +
    "\001\002\000\004\075\u010a\001\002\000\006\040\uffdf\074" +
    "\uffdf\001\002\000\004\073\u010c\001\002\000\004\075\u010d" +
    "\001\002\000\006\040\uffde\074\uffde\001\002\000\006\027" +
    "\261\075\u010f\001\002\000\004\074\u0111\001\002\000\004" +
    "\074\u0115\001\002\000\022\046\256\047\260\050\255\051" +
    "\254\052\257\053\251\073\252\076\u0112\001\002\000\006" +
    "\010\u0101\053\u0113\001\002\000\004\075\u0114\001\002\000" +
    "\006\040\uffe1\074\uffe1\001\002\000\022\046\256\047\260" +
    "\050\255\051\254\052\257\053\251\073\252\076\u0117\001" +
    "\002\000\006\040\uffeb\074\uffeb\001\002\000\006\010\u0101" +
    "\053\u0118\001\002\000\004\075\u0119\001\002\000\006\040" +
    "\uffe0\074\uffe0\001\002\000\032\002\uffec\010\uffec\020\uffec" +
    "\021\uffec\022\uffec\023\uffec\025\uffec\055\uffec\056\uffec\057" +
    "\uffec\060\uffec\070\uffec\001\002\000\026\004\057\005\065" +
    "\006\054\007\064\010\055\011\066\012\063\016\062\067" +
    "\060\072\067\001\002\000\004\066\u011d\001\002\000\004" +
    "\071\073\001\002\000\032\002\uffbc\010\uffbc\020\uffbc\021" +
    "\uffbc\022\uffbc\023\uffbc\025\uffbc\055\uffbc\056\uffbc\057\uffbc" +
    "\060\uffbc\070\uffbc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011c\000\050\002\037\003\033\004\012\005\006\006" +
    "\003\007\023\010\021\013\013\033\024\035\017\036\027" +
    "\042\030\043\032\044\015\045\025\046\004\047\035\050" +
    "\010\052\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\052" +
    "\055\054\214\055\067\057\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\037\167\040\166\041\170\001\001\000" +
    "\002\001\001\000\010\052\142\056\143\062\144\001\001" +
    "\000\002\001\001\000\044\004\076\005\006\006\003\007" +
    "\023\010\021\013\013\033\024\035\017\036\027\042\030" +
    "\043\032\044\015\045\025\046\004\047\035\050\010\052" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\052\055\054\070" +
    "\055\067\057\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\052\055" +
    "\055\067\057\135\001\001\000\002\001\001\000\010\052" +
    "\055\055\067\057\134\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\052" +
    "\055\055\067\057\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\061\073\001\001\000\046\003\074\004" +
    "\012\005\006\006\003\007\023\010\021\013\013\033\024" +
    "\035\017\036\027\042\030\043\032\044\015\045\025\046" +
    "\004\047\035\050\010\052\020\001\001\000\002\001\001" +
    "\000\044\004\076\005\006\006\003\007\023\010\021\013" +
    "\013\033\024\035\017\036\027\042\030\043\032\044\015" +
    "\045\025\046\004\047\035\050\010\052\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\052\055\055\067\057\133\001\001\000\010\052\055\055" +
    "\067\057\132\001\001\000\010\052\055\055\067\057\131" +
    "\001\001\000\010\052\055\055\067\057\130\001\001\000" +
    "\010\052\055\055\067\057\127\001\001\000\010\052\055" +
    "\055\067\057\126\001\001\000\010\052\055\055\067\057" +
    "\125\001\001\000\010\052\055\055\067\057\124\001\001" +
    "\000\010\052\055\055\067\057\123\001\001\000\010\052" +
    "\055\055\067\057\122\001\001\000\010\052\055\055\067" +
    "\057\121\001\001\000\010\052\055\055\067\057\120\001" +
    "\001\000\010\052\055\055\067\057\117\001\001\000\010" +
    "\052\055\055\067\057\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\052\055\054\140\055\067\057\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\052\055\054" +
    "\150\055\067\057\060\001\001\000\014\051\152\052\055" +
    "\054\151\055\067\057\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\052\055\054\155\055\067\057\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\062\161" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\052" +
    "\055\054\150\055\067\057\060\001\001\000\002\001\001" +
    "\000\004\061\174\001\001\000\002\001\001\000\006\040" +
    "\171\041\172\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\052\055\054\176\055\067\057\060\001\001\000\002" +
    "\001\001\000\004\061\200\001\001\000\002\001\001\000" +
    "\012\052\055\054\202\055\067\057\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\061\207\001\001\000\002\001\001\000\012" +
    "\052\055\054\211\055\067\057\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\052\055\054\217\055\067\057" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\052\055\054\222\055\067\057\060\001\001\000\002\001" +
    "\001\000\004\061\224\001\001\000\002\001\001\000\014" +
    "\052\055\053\226\054\227\055\067\057\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\052\055\054\233" +
    "\055\067\057\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\014\240\015\246\016\241" +
    "\017\235\020\245\021\244\022\247\023\237\030\236\034" +
    "\242\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\015\u0115\016\241\017\235\020\245\021" +
    "\244\022\247\023\237\030\236\034\242\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\031\u010d\032\261\001\001\000\006\031\u0102\032" +
    "\261\001\001\000\002\001\001\000\006\031\365\032\261" +
    "\001\001\000\006\031\320\032\261\001\001\000\006\031" +
    "\316\032\261\001\001\000\006\031\303\032\261\001\001" +
    "\000\006\031\262\032\261\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\264\001\001\000\004\060\271" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\052\055\054\277\055\067\057\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\060" +
    "\302\001\001\000\002\001\001\000\004\032\264\001\001" +
    "\000\004\060\306\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\264\001\001\000\002\001\001" +
    "\000\004\032\264\001\001\000\004\024\322\001\001\000" +
    "\004\025\345\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\026\327\027\326\001\001\000\002\001\001\000" +
    "\004\027\340\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\060\333\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\060\354\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\264\001" +
    "\001\000\004\060\370\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\264\001\001\000\004\060\u0105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\264\001" +
    "\001\000\026\014\u010f\015\246\016\241\017\235\020\245" +
    "\021\244\022\247\023\237\030\236\034\242\001\001\000" +
    "\024\015\u0115\016\241\017\235\020\245\021\244\022\247" +
    "\023\237\030\236\034\242\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\052\055" +
    "\054\u011b\055\067\057\060\001\001\000\002\001\001\000" +
    "\004\061\u011d\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserUFE$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserUFE$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserUFE$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


   
 public Nodo raiz;
    public void syntax_error(Symbol s){ 
            System.err.println("[UFE] No se esperaba este componente: " + s.value + " linea: "+s.left+" columna: "+s.right);
            Reporte.agregarReporte(new Reporte("Sintactico","[UFE] No se esperaba este componente: " + s.value, s.left,s.right));
    } 
   
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{   
      System.err.println(s.value + " error fatal");
    }

      private String ConvertirColor(String color) {
        switch (color.toLowerCase()) {
            case "red": {
                return "#ff3333";
            }
            case "pink": {
                return "#ff0080";
            }
            case "orange": {
                return "#ffb266";
            }
            case "yellow": {
                return "#ffff66";
            }
            case "purple": {
                return "#cc00cc";
            }
            case "magenta": {
                return "#f50087";
            }
            case "green": {
                return "#9ff781";
            }
            case "blue": {
                return "#3333ff";
            }
            case "brown": {
                return "#994c00";
            }
            case "white": {
                return "#ffffff";
            }
            case "gray": {
                return "#c0c0c0";
            }
            case "black": {
                return "#202020";
            } 
        }
        return "#CCCCFF";
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parserUFE$actions {
  private final parserUFE parser;

  /** Constructor */
  CUP$parserUFE$actions(parserUFE parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parserUFE$do_action_part00000000(
    int                        CUP$parserUFE$act_num,
    java_cup.runtime.lr_parser CUP$parserUFE$parser,
    java.util.Stack            CUP$parserUFE$stack,
    int                        CUP$parserUFE$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserUFE$result;

      /* select the action based on the action number */
      switch (CUP$parserUFE$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).value;
		RESULT = start_val;
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserUFE$parser.done_parsing();
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= L_INSTRUCCIONES 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		 parser.raiz = a; 
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // L_INSTRUCCIONES ::= L_INSTRUCCIONES INSTRUCCIONES 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo hijo3 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		
                                    hijo1.agregarHijo(hijo3);
                                    RESULT = hijo1;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("L_INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // L_INSTRUCCIONES ::= INSTRUCCIONES 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		
                                    Nodo padre = new Nodo("L_INSTRUCCIONES","",hijo1left,hijo1right);
                                    padre.agregarHijo( hijo1);
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("L_INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCIONES ::= COMPONENT 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		 RESULT =  a;  
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",2, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCIONES ::= IMPORT 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		 RESULT =  a;  
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",2, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCIONES ::= IMPORT_COMPONENT 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		 RESULT =  a;  
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",2, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCIONES ::= RENDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		 RESULT =  a;  
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",2, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCIONES ::= IF 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		 RESULT =  a;  
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",2, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCIONES ::= REPETIR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		 RESULT =  a;  
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",2, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCIONES ::= IMPRIMIR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		 RESULT =  a;  
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",2, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCIONES ::= MIENTRAS 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		 RESULT =  a;  
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",2, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCIONES ::= DECLARACION_VAR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		 RESULT =  a;  
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",2, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCIONES ::= DECLARACION_ARRAY 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		 RESULT =  a;  
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",2, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCIONES ::= ASIGNACION 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		 RESULT =  a;  
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",2, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCIONES ::= RETURN 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		 RESULT =  a;  
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",2, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // COMPONENT ::= component id parentesisIzq parentesisDer BLOQUE 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		
                                    Nodo padre = new Nodo("COMPONENTE","",aleft,aright);
                                    padre.agregarHijo(new Nodo("ID", a, aleft, aright));
                                    padre.agregarHijo( hijo2);
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("COMPONENT",3, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-4)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IMPORT ::= p_import EXPRESION pyc 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).value;
		
                                    Nodo padre = new Nodo("IMPORT_CSS","",hijo1.linea,hijo1.columna);
                                    padre.agregarHijo( hijo1);
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("IMPORT",4, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // RENDER ::= render parentesisIzq menor division id mayor coma id parentesisDer pyc 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).value;
		
                                    Nodo padre = new Nodo("RENDER","", aleft, aright);
                                    padre.agregarHijo(new Nodo("ID", a, aleft, aright));
                                    padre.agregarHijo(new Nodo("ID", b, bleft, bright));
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("RENDER",5, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-9)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // IMPORT_COMPONENT ::= p_import id from EXPRESION pyc 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).value;
		
                                    Nodo padre = new Nodo("IMPORT_COMPONENT","",aleft,aright);
                                    padre.agregarHijo(new Nodo("ID", a, aleft, aright));
                                    padre.agregarHijo(hijo2);
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("IMPORT_COMPONENT",6, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-4)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // BLOQUE ::= llaveIzq L_INSTRUCCIONES llaveDer 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).value;
		
                                    RESULT = hijo1;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("BLOQUE",47, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // RETURN ::= inicioReturn parentesisIzq L_COMPONENTES finReturn 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).value;
		
                                    Nodo padre = new Nodo("RETURN","",hijo1left,hijo1right);
                                    padre.agregarHijo( hijo1);
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("RETURN",9, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-3)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // L_COMPONENTES ::= L_COMPONENTES COMPONENTES 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo hijo3 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		
                                    hijo1.agregarHijo(hijo3);
                                    RESULT = hijo1;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("L_COMPONENTES",10, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // L_COMPONENTES ::= COMPONENTES 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		
                                    Nodo padre = new Nodo("L_COMPONENTES","",hijo1left,hijo1right);
                                    padre.agregarHijo( hijo1);
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("L_COMPONENTES",10, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // COMPONENTES ::= PANEL 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		 RESULT =  a;  
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("COMPONENTES",11, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // COMPONENTES ::= BOTON 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		 RESULT =  a;  
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("COMPONENTES",11, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // COMPONENTES ::= TEXTFIELD 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		 RESULT =  a;  
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("COMPONENTES",11, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // COMPONENTES ::= TEXT 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		 RESULT =  a;  
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("COMPONENTES",11, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // COMPONENTES ::= IMAGE 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		 RESULT =  a;  
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("COMPONENTES",11, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // COMPONENTES ::= LIST 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		 RESULT =  a;  
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("COMPONENTES",11, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // COMPONENTES ::= SPINNER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		 RESULT =  a;  
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("COMPONENTES",11, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // COMPONENTES ::= INSERT_IMPORT 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		 RESULT =  a;  
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("COMPONENTES",11, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PANEL ::= etiquetaA panel L_ATRIBUTOS etiquetaC etiquetaA diagonal panel etiquetaC 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-5)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-5)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-5)).value;
		
                                    Nodo padre = new Nodo("PANEL","",hijo1left,hijo1right);
                                    padre.agregarHijo( hijo1);
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("PANEL",12, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-7)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PANEL ::= etiquetaA panel L_ATRIBUTOS etiquetaC L_COMPONENTES etiquetaA diagonal panel etiquetaC 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-6)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-6)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-6)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-4)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-4)).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-4)).value;
		
                                    Nodo padre = new Nodo("PANEL","",hijo1left,hijo1right);
                                    padre.agregarHijo( hijo1);
                                    padre.agregarHijo( hijo2);
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("PANEL",12, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-8)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // BOTON ::= etiquetaA boton L_ATRIBUTOS etiquetaC TIPO etiquetaA diagonal boton etiquetaC 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-6)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-6)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-6)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-4)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-4)).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-4)).value;
		
                                    Nodo padre = new Nodo("BOTON","",hijo1left,hijo1right);
                                    padre.agregarHijo( hijo1);
                                    padre.agregarHijo( hijo2);
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("BOTON",13, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-8)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // BOTON ::= etiquetaA boton L_ATRIBUTOS etiquetaC etiquetaA diagonal boton etiquetaC 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-5)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-5)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-5)).value;
		
                                    Nodo padre = new Nodo("BOTON","",hijo1left,hijo1right);
                                    padre.agregarHijo( hijo1);
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("BOTON",13, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-7)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TEXTFIELD ::= etiquetaA textfield L_ATRIBUTOS etiquetaC TIPO etiquetaA diagonal textfield etiquetaC 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-6)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-6)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-6)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-4)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-4)).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-4)).value;
		
                                    Nodo padre = new Nodo("TEXTFIELD","",hijo1left,hijo1right);
                                    padre.agregarHijo( hijo1);
                                    padre.agregarHijo( hijo2);
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("TEXTFIELD",14, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-8)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TEXTFIELD ::= etiquetaA textfield L_ATRIBUTOS etiquetaC etiquetaA diagonal textfield etiquetaC 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-5)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-5)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-5)).value;
		
                                    Nodo padre = new Nodo("TEXTFIELD","",hijo1left,hijo1right);
                                    padre.agregarHijo( hijo1);
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("TEXTFIELD",14, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-7)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TEXT ::= etiquetaA text L_ATRIBUTOS etiquetaC TIPO etiquetaA diagonal text etiquetaC 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-6)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-6)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-6)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-4)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-4)).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-4)).value;
		
                                    Nodo padre = new Nodo("TEXT","",hijo1left,hijo1right);
                                    padre.agregarHijo( hijo1);
                                    padre.agregarHijo( hijo2);
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("TEXT",15, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-8)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TEXT ::= etiquetaA text L_ATRIBUTOS etiquetaC etiquetaA diagonal text etiquetaC 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-5)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-5)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-5)).value;
		
                                    Nodo padre = new Nodo("TEXT","",hijo1left,hijo1right);
                                    padre.agregarHijo( hijo1);
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("TEXT",15, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-7)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // IMAGE ::= etiquetaA image L_ATRIBUTOS etiquetaC 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).value;
		
                                    Nodo padre = new Nodo("IMAGE","",hijo1left,hijo1right);
                                    padre.agregarHijo( hijo1);
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("IMAGE",16, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-3)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LIST ::= etiquetaA list L_ATRIBUTOS etiquetaC ELEMENTS DEFAULT etiquetaA diagonal list etiquetaC 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-7)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-7)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-7)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-5)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-5)).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-5)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-4)).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-4)).right;
		Nodo hijo3 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-4)).value;
		
                                    Nodo padre = new Nodo("LIST","",hijo1left,hijo1right);
                                    padre.agregarHijo(hijo1);
                                    padre.agregarHijo(hijo2);
                                    padre.agregarHijo(hijo3);
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("LIST",17, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-9)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LIST ::= etiquetaA list L_ATRIBUTOS etiquetaC ELEMENTS etiquetaA diagonal list etiquetaC 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-6)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-6)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-6)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-4)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-4)).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-4)).value;
		
                                    Nodo padre = new Nodo("LIST","",hijo1left,hijo1right);
                                    padre.agregarHijo(hijo1);
                                    padre.agregarHijo(hijo2);
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("LIST",17, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-8)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ELEMENTS ::= etiquetaA elements etiquetaC L_ITEMS etiquetaA diagonal elements etiquetaC 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-4)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-4)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-4)).value;
		
                                    RESULT = hijo1;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("ELEMENTS",18, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-7)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DEFAULT ::= etiquetaA p_default etiquetaC TIPO etiquetaA diagonal p_default etiquetaC 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-4)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-4)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-4)).value;
		
                                    Nodo padre = new Nodo("DEFAULT","",hijo1left,hijo1right);
                                    padre.agregarHijo(hijo1);
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("DEFAULT",19, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-7)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // L_ITEMS ::= L_ITEMS ITEM 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo hijo3 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		
                                    hijo1.agregarHijo(hijo3);
                                    RESULT = hijo1;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("L_ITEMS",20, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // L_ITEMS ::= ITEM 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		
                                    Nodo padre = new Nodo("L_ITEMS","",hijo1left,hijo1right);
                                    padre.agregarHijo( hijo1);
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("L_ITEMS",20, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ITEM ::= etiquetaA item etiquetaC TIPO etiquetaA diagonal item etiquetaC 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-4)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-4)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-4)).value;
		
                                    RESULT = hijo1;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("ITEM",21, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-7)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SPINNER ::= etiquetaA spinner L_ATRIBUTOS etiquetaC TIPO etiquetaA diagonal spinner etiquetaC 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-6)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-6)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-6)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-4)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-4)).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-4)).value;
		
                                    Nodo padre = new Nodo("SPINNER","",hijo1left,hijo1right);
                                    padre.agregarHijo(hijo1);
                                    padre.agregarHijo(hijo2);
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("SPINNER",22, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-8)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // L_ATRIBUTOS ::= L_ATRIBUTOS ATRIBUTOS 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo hijo3 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		
                                    hijo1.agregarHijo(hijo3);
                                    RESULT = hijo1;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS",23, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // L_ATRIBUTOS ::= ATRIBUTOS 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		
                                    Nodo padre = new Nodo("L_ATRIBUTOS","",hijo1left,hijo1right);
                                    padre.agregarHijo( hijo1);
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS",23, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ATRIBUTOS ::= atributo igual TIPO 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		

                                    if (a.toLowerCase().equals("color") && !b.valor.contains("#")) {
                                        b.valor = ConvertirColor(b.valor.replace("\"", ""));
                                    }

                                    Nodo padre = new Nodo("ATRIBUTOS ","",aleft,aright);
                                    padre.agregarHijo(new Nodo("ID", a, aleft, aright));
                                    padre.agregarHijo(b);
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",24, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TIPO ::= p_cadena 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		RESULT = new Nodo("STRING", a.replace("\"",""), aleft, aright);
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("TIPO",46, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TIPO ::= numeroentero 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		RESULT = new Nodo("INT", a, aleft, aright);
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("TIPO",46, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TIPO ::= numeronegativo 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		RESULT = new Nodo("INT", a, aleft, aright);
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("TIPO",46, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TIPO ::= id 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		RESULT = new Nodo("ID", a, aleft, aright);
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("TIPO",46, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TIPO ::= llaveIzq EXPRESION llaveDer 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).value;
		RESULT = a;
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("TIPO",46, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ASIGNACION ::= ASIGNACION_VAR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		 RESULT =  a;  
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("ASIGNACION",25, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ASIGNACION ::= ASIGNACION_ARRAY 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		 RESULT =  a;  
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("ASIGNACION",25, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // INSERT_IMPORT ::= etiquetaA diagonal id etiquetaC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).value;
		
                                    Nodo padre = new Nodo("INSERT_IMPORT","",aleft,aright);
                                    padre.agregarHijo(new Nodo("ID", a, aleft, aright));
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("INSERT_IMPORT",26, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-3)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // IF ::= SI 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		
                                    Nodo padre = new Nodo("IF","",aleft,aright);
                                    padre.agregarHijo(a);
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("IF",27, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IF ::= SI L_SINO_SI 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		
                                    Nodo padre = new Nodo("IF","",hijo1left,hijo1right);
                                    padre.agregarHijo(hijo1);
                                    padre.agregarHijo(hijo2);
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("IF",27, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // IF ::= SI L_SINO_SI SINO 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo hijo3 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		
                                    Nodo padre = new Nodo("IF","",hijo1left,hijo1right);
                                    padre.agregarHijo(hijo1);
                                    padre.agregarHijo(hijo2);
                                    padre.agregarHijo(hijo3);
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("IF",27, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // IF ::= SI SINO 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		
                                    Nodo padre = new Nodo("IF","",hijo1left,hijo1right);
                                    padre.agregarHijo(hijo1);
                                    padre.agregarHijo(hijo2);
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("IF",27, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SI ::= si parentesisIzq EXPRESION parentesisDer BLOQUE 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		
                                    Nodo padre = new Nodo("SI","",hijo1left,hijo1right);
                                    padre.agregarHijo(hijo1);
                                    padre.agregarHijo(hijo2);
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("SI",28, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-4)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // L_SINO_SI ::= L_SINO_SI SINO_SI 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo hijo3 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		
                                    hijo1.agregarHijo(hijo3);
                                    RESULT = hijo1;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("L_SINO_SI",29, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // L_SINO_SI ::= SINO_SI 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		
                                    Nodo padre = new Nodo("L_SINO_SI","",hijo1left,hijo1right);
                                    padre.agregarHijo( hijo1);
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("L_SINO_SI",29, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SINO_SI ::= sino si parentesisIzq EXPRESION parentesisDer BLOQUE 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		
                                    Nodo padre = new Nodo("SINO_SI","",hijo1left,hijo1right);
                                    padre.agregarHijo( hijo1);
                                    padre.agregarHijo( hijo2);
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("SINO_SI",30, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-5)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SINO ::= sino BLOQUE 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		
                                    Nodo padre = new Nodo("SINO","",hijo1left,hijo1right);
                                    padre.agregarHijo( hijo1);
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("SINO",31, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // REPETIR ::= repetir parentesisIzq EXPRESION parentesisDer BLOQUE 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		
                                    Nodo padre = new Nodo("REPETIR","",hijo1left,hijo1right);
                                    padre.agregarHijo(hijo1);
                                    padre.agregarHijo(hijo2);
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("REPETIR",32, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-4)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // MIENTRAS ::= mientras parentesisIzq EXPRESION parentesisDer BLOQUE 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		
                                    Nodo padre = new Nodo("MIENTRAS","",hijo1left,hijo1right);
                                    padre.agregarHijo(hijo1);
                                    padre.agregarHijo(hijo2);
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("MIENTRAS",33, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-4)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // IMPRIMIR ::= imprimir parentesisIzq L_IMPRIMIR parentesisDer pyc 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).value;
		
                                    Nodo padre = new Nodo("IMPRIMIR","",hijo1left,hijo1right);
                                    padre.agregarHijo(hijo1);
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",34, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-4)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECLARACION_VAR ::= var L_ID pyc 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).value;
		
                                    Nodo padre = new Nodo("DECLARACION_VAR","",aleft,aright);
                                    padre.agregarHijo( hijo1);
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",37, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // L_ID ::= L_ID coma ASIGNAR 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		
                                    hijo1.agregarHijo(b);
                                    RESULT = hijo1;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("L_ID",44, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // L_ID ::= ASIGNAR 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		
                                    Nodo padre = new Nodo("LISTA_VARIABLES","",bleft,bright); 
                                    padre.agregarHijo(b);
                                    RESULT = padre;
                                 
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("L_ID",44, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ASIGNAR ::= id igual EXPRESION 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		
                                    Nodo padre = new Nodo("ASIGNAR","",aleft,aright);
                                    padre.agregarHijo(new Nodo("ID", a, aleft, aright));
                                    padre.agregarHijo(b);
                                    RESULT = padre;
                                 
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("ASIGNAR",48, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ASIGNAR ::= id 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		
                                    Nodo padre = new Nodo("ASIGNAR","",aleft,aright);
                                    padre.agregarHijo(new Nodo("ID", a, aleft, aright));
                                    RESULT = padre;
                                 
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("ASIGNAR",48, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ASIGNACION_VAR ::= id igual EXPRESION pyc 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-3)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).value;
		
                                    Nodo padre = new Nodo("ASIGNACION_VAR","",hijo1left,hijo1right);
                                    padre.agregarHijo(new Nodo("ID", a, aleft, aright));
                                    padre.agregarHijo(hijo1);
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",38, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-3)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DECLARACION_ARRAY ::= var ACCESO pyc 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).value;
		
                                    Nodo padre = new Nodo("DECLARACION_ARRAY","",hijo1left, hijo1right);
                                    padre.agregarHijo(hijo1);
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARRAY",35, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DECLARACION_ARRAY ::= var id igual llaveIzq L_EXPRESIONES llaveDer pyc 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-5)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).value;
		
                                    Nodo padre = new Nodo("DECLARACION_ARRAY","",aleft, aright);
                                    padre.agregarHijo(new Nodo("ID", a, aleft, aright));
                                    padre.agregarHijo(hijo2);
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARRAY",35, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-6)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // L_EXPRESIONES ::= L_EXPRESIONES coma EXPRESION 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		
                                    hijo1.agregarHijo(hijo2);
                                    RESULT = hijo1;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("L_EXPRESIONES",39, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // L_EXPRESIONES ::= EXPRESION 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		
                                    Nodo padre = new Nodo("L_EXPRESIONES","",hijo1left,hijo1right);
                                    padre.agregarHijo(hijo1);
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("L_EXPRESIONES",39, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // L_IMPRIMIR ::= L_IMPRIMIR mas EXPRESION 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		
                                    hijo1.agregarHijo(hijo2);
                                    RESULT = hijo1;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("L_IMPRIMIR",41, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // L_IMPRIMIR ::= EXPRESION 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		
                                    RESULT = hijo1;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("L_IMPRIMIR",41, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // VALOR_ARRAY ::= ACCESO 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		
                                    Nodo padre = new Nodo("VALOR_ARRAY", "", aleft, aright);
                                    padre.agregarHijo(a.hijos.get(0));
                                    padre.agregarHijo(a.hijos.get(1));
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("VALOR_ARRAY",43, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ACCESO ::= id corcheteIzq EXPRESION corcheteDer 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).value;
		
                                    Nodo padre = new Nodo("ACCESO","",aleft, aright);
                                    padre.agregarHijo(new Nodo("ID", a, aleft, aright));
                                    padre.agregarHijo(hijo2);
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("ACCESO",40, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-3)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ASIGNACION_ARRAY ::= ACCESO igual EXPRESION pyc 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-3)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-3)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).value;
		
                                    Nodo padre = new Nodo("ASIGNACION_ARRAY","",hijo1left, hijo1right);
                                    padre.agregarHijo(hijo1);
                                    padre.agregarHijo(hijo2);
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("ASIGNACION_ARRAY",36, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-3)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPRESION ::= OPERACION 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		RESULT =a;  
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("EXPRESION",42, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OPERACION ::= OPERACION and OPERACION 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		
                                    Nodo padre = new Nodo("OPERACION","",hijo1left,hijo1right);
                                    padre.agregarHijo( hijo1);
                                    padre.agregarHijo( new Nodo("&&","",hijo1left,hijo1right));
                                    padre.agregarHijo( hijo2);
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("OPERACION",45, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OPERACION ::= OPERACION or OPERACION 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		
                                    Nodo padre = new Nodo("OPERACION","",hijo1left,hijo1right);
                                    padre.agregarHijo( hijo1);
                                    padre.agregarHijo( new Nodo("||","",hijo1left,hijo1right));
                                    padre.agregarHijo( hijo2);
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("OPERACION",45, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OPERACION ::= OPERACION xor OPERACION 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		
                                    Nodo padre = new Nodo("OPERACION","",hijo1left,hijo1right);
                                    padre.agregarHijo( hijo1);
                                    padre.agregarHijo( new Nodo("^","",hijo1left,hijo1right));
                                    padre.agregarHijo( hijo2);
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("OPERACION",45, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OPERACION ::= negacion OPERACION 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		
                                    Nodo padre = new Nodo("OPERACION","",hijo1left,hijo1right);
                                    padre.agregarHijo( new Nodo("!","",hijo1left,hijo1right));
                                    padre.agregarHijo( new Nodo("!","",hijo1left,hijo1right));
                                    padre.agregarHijo( hijo1);
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("OPERACION",45, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OPERACION ::= OPERACION menor OPERACION 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		
                                    Nodo padre = new Nodo("OPERACION","",hijo1left,hijo1right);
                                    padre.agregarHijo( hijo1);
                                    padre.agregarHijo( new Nodo("<","",hijo1left,hijo1right));
                                    padre.agregarHijo( hijo2);
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("OPERACION",45, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OPERACION ::= OPERACION mayor OPERACION 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		
                                    Nodo padre = new Nodo("OPERACION","",hijo1left,hijo1right);
                                    padre.agregarHijo( hijo1);
                                    padre.agregarHijo( new Nodo(">","",hijo1left,hijo1right));
                                    padre.agregarHijo( hijo2);
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("OPERACION",45, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OPERACION ::= OPERACION mayorigual OPERACION 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		
                                    Nodo padre = new Nodo("OPERACION","",hijo1left,hijo1right);
                                    padre.agregarHijo( hijo1);
                                    padre.agregarHijo( new Nodo(">=","",hijo1left,hijo1right));
                                    padre.agregarHijo( hijo2);
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("OPERACION",45, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OPERACION ::= OPERACION menorigual OPERACION 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		
                                    Nodo padre = new Nodo("OPERACION","",hijo1left,hijo1right);
                                    padre.agregarHijo( hijo1);
                                    padre.agregarHijo( new Nodo("<=","",hijo1left,hijo1right));
                                    padre.agregarHijo( hijo2);
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("OPERACION",45, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OPERACION ::= OPERACION igualdad OPERACION 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		
                                    Nodo padre = new Nodo("OPERACION","",hijo1left,hijo1right);
                                    padre.agregarHijo( hijo1);
                                    padre.agregarHijo( new Nodo("==","",hijo1left,hijo1right));
                                    padre.agregarHijo( hijo2);
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("OPERACION",45, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OPERACION ::= OPERACION diferente OPERACION 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		
                                    Nodo padre = new Nodo("OPERACION","",hijo1left,hijo1right);
                                    padre.agregarHijo( hijo1);
                                    padre.agregarHijo( new Nodo("!=","",hijo1left,hijo1right));
                                    padre.agregarHijo( hijo2);
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("OPERACION",45, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OPERACION ::= menos OPERACION 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		
                                    RESULT = new Nodo(hijo1.estado, "-"+hijo1.valor, hijo1left, hijo1right);
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("OPERACION",45, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OPERACION ::= OPERACION mas OPERACION 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		
                                    Nodo padre = new Nodo("OPERACION","",hijo1left,hijo1right);
                                    padre.agregarHijo( hijo1);
                                    padre.agregarHijo( new Nodo("SUMA","",hijo1left,hijo1right));
                                    padre.agregarHijo( hijo2);
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("OPERACION",45, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OPERACION ::= OPERACION menos OPERACION 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		
                                    Nodo padre = new Nodo("OPERACION","",hijo1left,hijo1right);
                                    padre.agregarHijo( hijo1);
                                    padre.agregarHijo( new Nodo("RESTA","",hijo1left,hijo1right));
                                    padre.agregarHijo( hijo2);
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("OPERACION",45, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OPERACION ::= OPERACION multi OPERACION 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		
                                    Nodo padre = new Nodo("OPERACION","",hijo1left,hijo1right);
                                    padre.agregarHijo( hijo1);
                                    padre.agregarHijo( new Nodo("MULTIPLICACION","",hijo1left,hijo1right));
                                    padre.agregarHijo( hijo2);
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("OPERACION",45, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OPERACION ::= OPERACION division OPERACION 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		
                                    Nodo padre = new Nodo("OPERACION","",hijo1left,hijo1right);
                                    padre.agregarHijo( hijo1);
                                    padre.agregarHijo( new Nodo("DIVISION","",hijo1left,hijo1right));
                                    padre.agregarHijo( hijo2);
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("OPERACION",45, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OPERACION ::= OPERACION pow OPERACION 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo hijo2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		
                                    Nodo padre = new Nodo("OPERACION","",hijo1left,hijo1right);
                                    padre.agregarHijo( hijo1);
                                    padre.agregarHijo( new Nodo("POTENCIA","",hijo1left,hijo1right));
                                    padre.agregarHijo( hijo2);
                                    RESULT = padre;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("OPERACION",45, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OPERACION ::= parentesisIzq OPERACION parentesisDer 
            {
              Nodo RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).right;
		Nodo hijo1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-1)).value;
		
                                    RESULT = hijo1;
                                
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("OPERACION",45, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.elementAt(CUP$parserUFE$top-2)), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OPERACION ::= numeroentero 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		 RESULT = new Nodo("INT", a, aleft, aright);
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("OPERACION",45, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OPERACION ::= numerodecimal 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		RESULT = new Nodo("DOUBLE", a, aleft, aright); 
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("OPERACION",45, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OPERACION ::= id 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		RESULT = new Nodo("ID", a, aleft, aright);
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("OPERACION",45, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OPERACION ::= p_char 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		RESULT = new Nodo("CHAR", a.replace("'",""), aleft, aright);
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("OPERACION",45, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OPERACION ::= p_true 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		RESULT = new Nodo("BOOLEAN", a, aleft, aright);
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("OPERACION",45, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OPERACION ::= p_false 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		RESULT = new Nodo("BOOLEAN", a, aleft, aright);
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("OPERACION",45, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OPERACION ::= p_cadena 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		RESULT = new Nodo("STRING", a.replace("\"",""), aleft, aright);
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("OPERACION",45, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // OPERACION ::= VALOR_ARRAY 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parserUFE$stack.peek()).value;
		 RESULT =  a; 
              CUP$parserUFE$result = parser.getSymbolFactory().newSymbol("OPERACION",45, ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserUFE$stack.peek()), RESULT);
            }
          return CUP$parserUFE$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parserUFE$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parserUFE$do_action(
    int                        CUP$parserUFE$act_num,
    java_cup.runtime.lr_parser CUP$parserUFE$parser,
    java.util.Stack            CUP$parserUFE$stack,
    int                        CUP$parserUFE$top)
    throws java.lang.Exception
    {
              return CUP$parserUFE$do_action_part00000000(
                               CUP$parserUFE$act_num,
                               CUP$parserUFE$parser,
                               CUP$parserUFE$stack,
                               CUP$parserUFE$top);
    }
}

}
