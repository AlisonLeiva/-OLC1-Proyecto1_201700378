
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import HTML.HTML;
import proyecto1.Reporte;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parserHTML extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym1.class;
}

  /** Default constructor. */
  @Deprecated
  public parserHTML() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parserHTML(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserHTML(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\014\000\002\002\004\000\002\002\010\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\005\020\000\002\006\012\000\002\007\004\000" +
    "\002\007\003\000\002\010\011\000\002\010\014" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\064\000\004\011\004\001\002\000\004\006\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\004\013\001\002\000\004\004\ufffc\001\002\000" +
    "\004\004\ufffe\001\002\000\004\004\ufffd\001\002\000\006" +
    "\013\020\014\017\001\002\000\004\004\016\001\002\000" +
    "\004\004\uffff\001\002\000\010\007\021\013\020\014\017" +
    "\001\002\000\004\006\037\001\002\000\004\006\023\001" +
    "\002\000\004\012\022\001\002\000\004\002\000\001\002" +
    "\000\004\004\024\001\002\000\004\015\025\001\002\000" +
    "\004\006\026\001\002\000\004\004\027\001\002\000\004" +
    "\007\030\001\002\000\004\015\031\001\002\000\004\006" +
    "\032\001\002\000\004\004\033\001\002\000\004\007\034" +
    "\001\002\000\004\013\035\001\002\000\004\006\036\001" +
    "\002\000\004\004\ufffb\001\002\000\004\004\042\001\002" +
    "\000\004\004\063\001\002\000\004\004\ufff8\001\002\000" +
    "\006\016\043\020\044\001\002\000\004\006\055\001\002" +
    "\000\004\017\045\001\002\000\004\010\046\001\002\000" +
    "\004\005\047\001\002\000\004\006\050\001\002\000\004" +
    "\004\051\001\002\000\004\007\052\001\002\000\004\020" +
    "\053\001\002\000\004\006\054\001\002\000\004\004\ufff6" +
    "\001\002\000\004\004\056\001\002\000\004\007\057\001" +
    "\002\000\004\016\060\001\002\000\004\006\061\001\002" +
    "\000\004\004\ufff7\001\002\000\004\004\ufff9\001\002\000" +
    "\010\007\064\016\043\020\044\001\002\000\004\014\065" +
    "\001\002\000\004\006\066\001\002\000\004\004\ufffa\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\064\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\013\004\010" +
    "\005\011\006\007\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\014" +
    "\005\011\006\007\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\037\010\040\001\001\000\004\010\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserHTML$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserHTML$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserHTML$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  

    public void syntax_error(Symbol s){ 
            System.err.println("[HTML] No se esperaba este componente: " + s.value + " linea: "+s.left+" columna: "+s.right);
            Reporte.agregarReporte(new Reporte("Sintactico", "[HTML] No se esperaba este componente: " + s.value, s.left,s.right));
           } 
   
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
       
      System.err.println(s.value + " error falta");
     
    }


  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parserHTML$actions {
  private final parserHTML parser;

  /** Constructor */
  CUP$parserHTML$actions(parserHTML parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parserHTML$do_action_part00000000(
    int                        CUP$parserHTML$act_num,
    java_cup.runtime.lr_parser CUP$parserHTML$parser,
    java.util.Stack            CUP$parserHTML$stack,
    int                        CUP$parserHTML$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserHTML$result;

      /* select the action based on the action number */
      switch (CUP$parserHTML$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-1)).value;
		RESULT = start_val;
              CUP$parserHTML$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-1)), ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserHTML$parser.done_parsing();
          return CUP$parserHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= htmlI mayor L_HTML txtetiqueta diagonal htmlF 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-3)).value;
		
                      System.out.println("<html>\n"+a+"</html>");
                    
              CUP$parserHTML$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-5)), ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), RESULT);
            }
          return CUP$parserHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // L_HTML ::= L_HTML HTML 
            {
              String RESULT =null;
		int htmlleft = ((java_cup.runtime.Symbol)CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-1)).left;
		int htmlright = ((java_cup.runtime.Symbol)CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-1)).right;
		String html = (String)((java_cup.runtime.Symbol) CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parserHTML$stack.peek()).value;
		RESULT = html + b;
              CUP$parserHTML$result = parser.getSymbolFactory().newSymbol("L_HTML",1, ((java_cup.runtime.Symbol)CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-1)), ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), RESULT);
            }
          return CUP$parserHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // L_HTML ::= HTML 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parserHTML$stack.peek()).value;
		RESULT = b;
              CUP$parserHTML$result = parser.getSymbolFactory().newSymbol("L_HTML",1, ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), RESULT);
            }
          return CUP$parserHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // HTML ::= HEAD 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parserHTML$stack.peek()).value;
		RESULT = b;
              CUP$parserHTML$result = parser.getSymbolFactory().newSymbol("HTML",2, ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), RESULT);
            }
          return CUP$parserHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // HTML ::= BODY 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parserHTML$stack.peek()).value;
		RESULT = b;
              CUP$parserHTML$result = parser.getSymbolFactory().newSymbol("HTML",2, ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), RESULT);
            }
          return CUP$parserHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // HEAD ::= txtetiqueta head mayor txtetiqueta title mayor txtetiqueta diagonal title mayor txtetiqueta diagonal head mayor 
            {
              String RESULT =null;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-7)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-7)).right;
		String titulo = (String)((java_cup.runtime.Symbol) CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-7)).value;
		
                        RESULT = "<head>\n<title>"+titulo+"</title>\n</head>";
                    
              CUP$parserHTML$result = parser.getSymbolFactory().newSymbol("HEAD",3, ((java_cup.runtime.Symbol)CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-13)), ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), RESULT);
            }
          return CUP$parserHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BODY ::= txtetiqueta body mayor L_BODY txtetiqueta diagonal body mayor 
            {
              String RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-4)).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-4)).right;
		String texto = (String)((java_cup.runtime.Symbol) CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-4)).value;
		
                        RESULT = "<body> \n "+texto+"</body> \n";
                    
              CUP$parserHTML$result = parser.getSymbolFactory().newSymbol("BODY",4, ((java_cup.runtime.Symbol)CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-7)), ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), RESULT);
            }
          return CUP$parserHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // L_BODY ::= L_BODY B 
            {
              String RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-1)).right;
		String body = (String)((java_cup.runtime.Symbol) CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parserHTML$stack.peek()).value;
		RESULT = body + b; 
              CUP$parserHTML$result = parser.getSymbolFactory().newSymbol("L_BODY",5, ((java_cup.runtime.Symbol)CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-1)), ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), RESULT);
            }
          return CUP$parserHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // L_BODY ::= B 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parserHTML$stack.peek()).value;
		RESULT = b;
              CUP$parserHTML$result = parser.getSymbolFactory().newSymbol("L_BODY",5, ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), RESULT);
            }
          return CUP$parserHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // B ::= txtetiqueta noufe mayor txtetiqueta diagonal noufe mayor 
            {
              String RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-3)).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-3)).right;
		String texto = (String)((java_cup.runtime.Symbol) CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-3)).value;
		
                        HTML.agregarId(new HTML(true,texto.trim()));
                        RESULT = "<noufe>"+texto+"</noufe> \n";
                    
              CUP$parserHTML$result = parser.getSymbolFactory().newSymbol("B",6, ((java_cup.runtime.Symbol)CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), RESULT);
            }
          return CUP$parserHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // B ::= txtetiqueta div id igual cadena mayor txtetiqueta diagonal div mayor 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-5)).value;
		
                         HTML.agregarId(new HTML(false,id.replace("\"","").toLowerCase().trim()));
                        RESULT = "<div id="+id+"></div> \n";
                    
              CUP$parserHTML$result = parser.getSymbolFactory().newSymbol("B",6, ((java_cup.runtime.Symbol)CUP$parserHTML$stack.elementAt(CUP$parserHTML$top-9)), ((java_cup.runtime.Symbol)CUP$parserHTML$stack.peek()), RESULT);
            }
          return CUP$parserHTML$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parserHTML$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parserHTML$do_action(
    int                        CUP$parserHTML$act_num,
    java_cup.runtime.lr_parser CUP$parserHTML$parser,
    java.util.Stack            CUP$parserHTML$stack,
    int                        CUP$parserHTML$top)
    throws java.lang.Exception
    {
              return CUP$parserHTML$do_action_part00000000(
                               CUP$parserHTML$act_num,
                               CUP$parserHTML$parser,
                               CUP$parserHTML$stack,
                               CUP$parserHTML$top);
    }
}

}
